[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "generate_color",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "Results",
        "importPath": "ultralytics.engine.results",
        "description": "ultralytics.engine.results",
        "isExtraImport": true,
        "detail": "ultralytics.engine.results",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "Identification..venv.Scripts.activate_this",
        "description": "Identification..venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "Identification..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "generate_color",
        "kind": 2,
        "importPath": "Identification.yolo-data-visualization.helpers",
        "description": "Identification.yolo-data-visualization.helpers",
        "peekOfCode": "def generate_color():\n    # Generate random values for red, green, and blue channels\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    # Ensure sufficient contrast for visualization\n    if (r + g + b) / 3 < 128:\n        return generate_color()  # If color is too dark, try again\n    else:\n        return (r, g, b)",
        "detail": "Identification.yolo-data-visualization.helpers",
        "documentation": {}
    },
    {
        "label": "load_list_classname",
        "kind": 2,
        "importPath": "Identification.yolo-data-visualization.remap_labels",
        "description": "Identification.yolo-data-visualization.remap_labels",
        "peekOfCode": "def load_list_classname(classname_file):\n    if classname_file.endswith(\".txt\"):\n        with open(classname_file, \"r\") as f:\n            list_classname = f.read().rstrip(\"\\n\").split(\"\\n\")\n    elif classname_file.endswith(\".json\"):\n        with open(classname_file, 'r') as f:\n            class_mapping_dict = json.load(f)\n        swap_dict = {}\n        for key in class_mapping_dict.keys():\n            swap_dict[class_mapping_dict[key]] = key",
        "detail": "Identification.yolo-data-visualization.remap_labels",
        "documentation": {}
    },
    {
        "label": "model_name",
        "kind": 5,
        "importPath": "Identification.real_time_yolo_demo",
        "description": "Identification.real_time_yolo_demo",
        "peekOfCode": "model_name = 'yolo11n.pt'\n# Download the YOLO model\nif not os.path.isfile(model_name):\n    print(f'{model_name} does not exist. Downloading...')\n    download_url = 'https://github.com/ultralytics/assets/releases/download/v8.3.0/yolo11n.pt'\n    response = requests.get(download_url)\n    if response.status_code == 200:\n        with open(model_name, 'wb') as file:\n            file.write(response.content)\n        print(f'Downloaded {model_name}')",
        "detail": "Identification.real_time_yolo_demo",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "Identification.real_time_yolo_demo",
        "description": "Identification.real_time_yolo_demo",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nfont = cv2.FONT_HERSHEY_SIMPLEX\n# Loop through the video frames\nwhile cap.isOpened():\n    # Read a frame from the video\n    success, frame = cap.read()\n    if success:\n        # Run YOLO inference on the frame\n        results: List[Results] = model(frame)\n        # Visualize the results on the frame",
        "detail": "Identification.real_time_yolo_demo",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "Identification.real_time_yolo_demo",
        "description": "Identification.real_time_yolo_demo",
        "peekOfCode": "font = cv2.FONT_HERSHEY_SIMPLEX\n# Loop through the video frames\nwhile cap.isOpened():\n    # Read a frame from the video\n    success, frame = cap.read()\n    if success:\n        # Run YOLO inference on the frame\n        results: List[Results] = model(frame)\n        # Visualize the results on the frame\n        annotated_frame: np.ndarray = results[0].plot()",
        "detail": "Identification.real_time_yolo_demo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Identification.train",
        "description": "Identification.train",
        "peekOfCode": "def main():\n    config_path = r'datasets/config.yaml'\n    # Load a model\n    model = YOLO('yolo11n.pt')\n    # Use the model with a reduced batch size\n    model.train(data=config_path, epochs=200, batch=16, amp=False) # modify params for different training\nif __name__ == '__main__':\n    main()",
        "detail": "Identification.train",
        "documentation": {}
    }
]